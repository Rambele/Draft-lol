from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import random
import time
import networkx as nx
from Levenshtein import distance
import fichier_test_fonctio as f
blue_side_picks = []
blue_list = []
blue_side_roles = []
red_side_picks = []
red_list = []
blue_side_bans = []
red_side_bans = []
numero_pick_red = 0 
graphe = nx.read_graphml("./mon_graphe.graphml")
# Utilisation du navigateur Chrome. Assurez-vous d'avoir le driver correspondant installé.
driver = webdriver.Chrome()

# Ouvrir la page web
driver.get("https://draftlol.dawe.gg/mLhcJt9I/gzT38qkl")

# Fonction pour attendre que le joueur Red soit prêt et cliquer sur "Ready"
def wait_for_red_turn(driver):
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div.roomReadyBackgroundred.active"))
    )
    print("C'est le tour de Red.")
    
    # Ajouter le clic sur "Ready" pour le joueur Red
    room_ready_red = driver.find_element(By.CSS_SELECTOR, "div.roomReadyBackgroundred.active")
    room_ready_red.click()
    print("Le joueur Red a cliqué sur Ready.")

# Fonction pour attendre que le joueur Blue soit prêt et cliquer sur "Ready"
def wait_for_blue_turn(driver):
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div.roomReadyBackgroundblue.active"))
    )
    print("C'est le tour de Blue.")
    
    # Ajouter le clic sur "Ready" pour le joueur Blue
    room_ready_blue = driver.find_element(By.CSS_SELECTOR, "div.roomReadyBackgroundblue.active")
    room_ready_blue.click()
    print("Le joueur Blue a cliqué sur Ready.")

def trouve_champ_lol_list(champion,list_champion_element ) : 
    distance_levenshtein = 10
    elementtrouver = list_champion_element[0]
    for element in list_champion_element :
        x = distance(champion,element.get_attribute('alt') )
        if distance_levenshtein > x :
            distance_levenshtein = x
            elementtrouver = element
    return elementtrouver

def trouve_champ_graphe_list(champion,graphe) : 
    distance_levenshtein = 10
    elementtrouver = ''
    for element in graphe :
        x = distance(champion,element )
        if distance_levenshtein > x :
            distance_levenshtein = x
            elementtrouver = element
    return elementtrouver

def click_sur_champion_random(driver,pickOrBan):
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/div[6]/div[2]/img'))
    )
    list_champion_element = driver.find_elements(By.XPATH, '//*[@id="root"]/div/div[6]/div[2]/img')
    elements_non_desactives = [element for element in list_champion_element if not element.get_attribute('disabled')]
    if(pickOrBan) : 
        champ = f.champion_plus_stable(graphe,blue_list,red_list,blue_side_roles)
        element_aleatoire = trouve_champ_lol_list(champ,list_champion_element)
    else : 
        element_aleatoire = random.choice(elements_non_desactives)
    element_aleatoire.click()
    if(pickOrBan):
        f.pick_champion(f.champion_plus_stable(graphe,blue_list,red_list,blue_side_roles),graphe,blue_list,blue_side_roles)
    else :
        f.ban_champion(trouve_champ_graphe_list(element_aleatoire.get_attribute('alt'),graphe),graphe)
    element_select = driver.find_elements(By.XPATH, '//*[@id="root"]/div/div[7]')
    element_select[0].click()
    valeur_alt = element_aleatoire.get_attribute('alt')
    print("champion choisi : " + valeur_alt)
    blue_side_picks.append(valeur_alt) if pickOrBan else  blue_side_bans.append(valeur_alt)

def recuperer_info_red(driver, num) : 
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/div[3]/div'))
    )
    champion_red_click = driver.find_elements(By.XPATH, '//*[@id="root"]/div/div[3]/div')
    champion_name = champion_red_click[num].text
    red_list.append(trouve_champ_graphe_list(champion_name,graphe))
    return champion_name
def recuperer_info_redban(driver, num) : 
    WebDriverWait(driver, 60).until(
    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/div[5]/div/img'))
    )
    champion_red_click = driver.find_elements(By.XPATH, '//*[@id="root"]/div/div[5]/div/img')
    champion_name = champion_red_click[num].get_attribute("alt")
    f.ban_champion(trouve_champ_graphe_list(champion_name,graphe),graphe)
    return champion_name

# Attendre que la page soit chargée (timeout de 10 secondes)
try:
    # click ready
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)

    # phase de ban 1

    # clicker sur un ban 1
    click_sur_champion_random(driver,False)
    # attendre le tour blue 
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_bans.append(recuperer_info_redban(driver,0))
    # click pour ban 2
    click_sur_champion_random(driver,False)
    # attendre le tour blue
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_bans.append(recuperer_info_redban(driver,1))
    # click pour ban3
    click_sur_champion_random(driver,False)
    # attndre le tour blue 
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_bans.append(recuperer_info_redban(driver,2))
    print("FIN phase de ban 1")  

    #phase de pick 1
    click_sur_champion_random(driver,True)
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_picks.append(recuperer_info_red(driver,0))
    red_side_picks.append(recuperer_info_red(driver,1))
    click_sur_champion_random(driver,True)
    click_sur_champion_random(driver,True)
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_picks.append(recuperer_info_red(driver,2))
    red_side_bans.append(recuperer_info_redban(driver,3))
    
    print("FIN phase de pick 1")   

    # phase de ban 2
    click_sur_champion_random(driver,False) 
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_bans.append(recuperer_info_redban(driver,4))
    click_sur_champion_random(driver,False)
    wait_for_red_turn(driver)
    wait_for_blue_turn(driver)
    red_side_picks.append(recuperer_info_red(driver,3)) 
    print("FIN phase de ban 2") 

    # phase de pick 2
    click_sur_champion_random(driver,True) 
    time.sleep(0.5)
    click_sur_champion_random(driver,True) 
    red_side_picks.append(recuperer_info_red(driver,4))
    EC.text_to_be_present_in_element((By.XPATH, '//*[@id="root"]/div/div[7]'), "Finished")
    
    
    
    print("FIN de la draft") 
    print("Blue bans : " , blue_side_bans)
    print("Blue bans : " ,blue_side_picks)
    print("Red bans : " , red_side_bans)
    print("Red bans : " , red_side_picks)
    
finally:
    # Fermer le navigateur
    driver.quit()
